import pandas as pd
import numpy as np

def calculate_sharpe_ratio(prices, risk_free_rate=0.02):
    """
    使用 Pandas 和 NumPy 计算年化夏普比率。

    参数:
    prices (pd.Series): 包含资产每日收盘价的时间序列。
    risk_free_rate (float): 年化无风险利率。

    返回:
    float: 年化夏普比率。
    """
    # 1. 计算每日回报率
    # 使用 Pandas 的 pct_change() 函数可以轻松计算每日百分比变化
    daily_returns = prices.pct_change().dropna()

    # 2. 计算超额回报率
    # 假设每日的无风险利率是年化利率除以252个交易日
    daily_risk_free_return = risk_free_rate / 252
    excess_returns = daily_returns - daily_risk_free_return

    # 3. 计算年化夏普比率
    # 年化超额回报 = 平均超额回报 * 252
    # 年化波动率 = 超额回报的标准差 * sqrt(252)
    avg_excess_return = excess_returns.mean()
    std_dev_excess_return = excess_returns.std()
    
    # 防止除以零
    if std_dev_excess_return == 0:
        return 0.0

    sharpe_ratio = (avg_excess_return / std_dev_excess_return) * np.sqrt(252)
    
    return sharpe_ratio

if __name__ == '__main__':
    # 创建一个示例价格序列
    data = {
        'price': [100, 102, 101, 103, 105, 104, 106, 108, 110, 109]
    }
    dates = pd.to_datetime(pd.date_range(start='2023-01-01', periods=10))
    price_series = pd.Series(data['price'], index=dates)

    # 计算夏普比率
    sharpe = calculate_sharpe_ratio(price_series, risk_free_rate=0.02)
    
    print(f"示例价格序列:\n{price_series}\n")
    print(f"计算出的年化夏普比率为: {sharpe:.4f}")


# 安装: pip install backtrader
import backtrader as bt
import datetime

# 1. 创建策略 (Strategy)
class SmaCrossStrategy(bt.Strategy):
    # 定义策略参数
    params = (
        ('fast_ma', 10),  # 快速MA周期
        ('slow_ma', 50),  # 慢速MA周期
    )

    def __init__(self):
        # 获取收盘价数据
        self.dataclose = self.datas[0].close
        
        # 初始化订单状态
        self.order = None

        # 计算移动平均线
        self.fast_ma = bt.indicators.SimpleMovingAverage(
            self.datas[0], period=self.params.fast_ma
        )
        self.slow_ma = bt.indicators.SimpleMovingAverage(
            self.datas[0], period=self.params.slow_ma
        )
        
        # 计算交叉信号
        self.crossover = bt.indicators.CrossOver(self.fast_ma, self.slow_ma)

    def next(self):
        # 如果已有持仓，则不操作
        if self.position:
            # 如果出现向下交叉，则平仓
            if self.crossover < 0:
                self.close()
        # 如果没有持仓
        elif self.crossover > 0:
            # 出现向上交叉，买入
            self.buy()

# 2. 主程序
if __name__ == '__main__':
    # 创建Cerebro引擎
    cerebro = bt.Cerebro()

    # 添加策略
    cerebro.addstrategy(SmaCrossStrategy)

    # 准备数据
    # 这里使用 Backtrader 自带的示例数据
    datapath = ('https://raw.githubusercontent.com/mementum/backtrader/master/datas/orcl-1995-2014.txt')
    data = bt.feeds.YahooFinanceCSVData(
        dataname=datapath,
        fromdate=datetime.datetime(2000, 1, 1),
        todate=datetime.datetime(2003, 12, 31),
        reverse=False
    )
    
    # 将数据添加到Cerebro
    cerebro.adddata(data)

    # 设置初始资金
    cerebro.broker.setcash(100000.0)
    # 设置佣金
    cerebro.broker.setcommission(commission=0.001)

    # 打印初始价值
    print(f'初始资金: {cerebro.broker.getvalue():.2f}')

    # 运行回测
    cerebro.run()

    # 打印最终价值
    print(f'最终资金: {cerebro.broker.getvalue():.2f}')
    
    # 绘制图表
    cerebro.plot(style='candlestick', barup='green', bardown='red')